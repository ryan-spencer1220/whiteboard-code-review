Question #2: Array Deduping
Write an algorithm that removes duplicates from an array. Do not use a function like filter() to solve this. Once you have solved the problem, demonstrate how it can be solved with filter(). Solve the problem with and without recursion.

Example
Input: [7, 9, "hi", 12, "hi", 7, 53]

Output: [7, 9, "hi", 12, 53]

/////////////////////////////////////////

NON-FILTER METHOD
// Function creates an empty return array, loops thorugh the input array, checks to see if the current element in the input array can be found in the answer array, if not, the function pushes that element to the answer array, if the element is already included in the answer array the loop will move on to the next iteration

function answerFunction(array) {
  answerArray = []
  for(let i = 0; i < array.length; i++) {
    if(!answerArray.includes(array[i])) {
      answerArray.push(array[i])
    }
  }
  return answerArray
}

answerFunction([7, 9, "hi", 12, "hi", 7, 53])

/////////////////////////////////////////

FILTER METHOD


function filterAnswerFunction(array) {
    return array.filter((item, index) => array.indexOf(item) === index);
}

filterAnswerFunction([7, 9, "hi", 12, "hi", 7, 53])

/////////////////////////////////////////

RECURSION METHOD

let i = 0;
let answerArray = [];

const duplicatesRecursive = inputArray => {
  if (inputArray.length === 0) {
    return answerArray;
  } else if (!answerArray.includes(inputArray[i])) {
    answerArray.push(inputArray[i]);
    inputArray.shift();
    return duplicatesRecursive(inputArray);
  } else {
    inputArray.shift();
    return duplicatesRecursive(inputArray);
  }
};